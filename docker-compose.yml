version: '3'
services:
    web:
        image: nginx
        volumes:
            - ./.docker/conf/nginx/default.conf:/etc/nginx/conf.d/default.conf
            - .:/var/www/
            - ./.docker/log/nginx:/var/log/nginx/
            - ./.docker/sert/:/etc/nginx/ssl/
        ports:
            - 80:80
        restart: always
        depends_on:
            - php
            - mysql
        networks:
            default:
                ipv4_address: 10.5.0.5
    php:
        build: .docker
        restart: always
        volumes:
            - ./.docker/conf/php/php.ini:/usr/local/etc/php/conf.d/php.ini
            - .:/var/www/
        #            - ./.docker/log/symfony:/var/www/var/log:cached
        networks:
            default:
                ipv4_address: 10.5.0.6
    mysql:
        image: mariadb:10.6
        ports:
            - '3307:3306'
        volumes:
            - ./.docker/conf/mysql/db-data:/var/lib/mysql
            - ./.docker/conf/mysql/config:/etc/mysql/conf.d
            - ./.docker/log/mysql/:/var/lib/mysql/logs
            - ./.docker/conf/mysql/init:/docker-entrypoint-initdb.d
            - .:/var/www/
        environment:
            MYSQL_DATABASE: 'mysql_database'
            MYSQL_ROOT_PASSWORD: 'password'
        restart: always
        networks:
            default:
                ipv4_address: 10.5.0.9
    phpmyadmin:
        image: phpmyadmin
        restart: always
        ports:
            - 8282:80
        environment:
            PMA_HOST: mysql
        networks:
            default:
                ipv4_address: 10.5.0.10
    chrome:
        image: selenium/standalone-chrome
        restart: always
        ports:
            - 4444:4444
        depends_on:
            - web
        networks:
            default:
                ipv4_address: 10.5.0.3
#    mercure:
#        image: dunglas/mercure
#        restart: unless-stopped
#        environment:
#            # Если сервер работает под https, то нужно закомментировать эту строку
#            SERVER_NAME: ':8000'
#            # Сюда подставляем секретный ключ для JWT токена(Именно ключ, а не сам токен)
#            MERCURE_PUBLISHER_JWT_KEY: '!changeme!'
#        # Закомментировать, если не нужен dev режим
#        command: /usr/bin/caddy run -config /etc/caddy/Caddyfile.dev
#        ports:
#            - "8000:8000"
#        volumes:
#            - caddy_data:/data
#            - caddy_config:/config
#    elasticsearch:
#        image: docker.elastic.co/elasticsearch/elasticsearch:7.13.4
#        environment:
#            discovery.type: "single-node"
#        ports:
#            - "9200:9200"
#    kibana:
#        image: docker.elastic.co/kibana/kibana:7.13.4
#        restart: always
#        environment:
#            ELASTICSEARCH_URL: "http://elasticsearch:9200"
#        ports:
#            - "5601:5601"
#        volumes:
#            - ./.docker/conf/kibana:/usr/share/kibana/config
#        depends_on:
#            - elasticsearch
#    logstash:
#        image: docker.elastic.co/logstash/logstash:7.13.4
#        ports:
#            - "5046:5046"
#        #        environment:
#        #            XPACK_MONITORING_ENABLED: "false"
#        volumes:
#            - ./.docker/conf/logstash/pipelines.yml:/usr/share/logstash/config/pipelines.yml:ro
#            - ./.docker/conf/logstash/pipelines:/usr/share/logstash/config/pipelines:ro
#            - ./.docker/conf/logstash/patterns:/usr/share/logstash/patterns
#            - ./.docker/log/nginx:/usr/share/logstash/input/nginx
#            - ./.docker/log/symfony:/usr/share/logstash/input/symfony
#        depends_on:
#            - web
#            - elasticsearch
#volumes:
#    caddy_data:
#    caddy_config:
networks:
    default:
        name:  postgres12_network
        ipam:
            config:
                - subnet: 10.5.0.0/10

